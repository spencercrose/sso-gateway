enabled: true

replicaCount: 1

image:
  repository: redis
  pullPolicy: IfNotPresent
  tag: "8.0.2"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podLabels: {}

# This is the Redis password for connecting to the Redis instance
password: 
  value: "" # Provide a plaintext secret here to use a specific value
  generate: true # Set to true to generate a random secret if 'value' is empty
  length: 32 # Length of the randomly generated string

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 6379

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Redis connection configuration
env: {}

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

persistence:
  enabled: false # Set to true for production, requires a StorageClass
  size: 256Mi
  storageClassName: "" # Defaults to cluster default, specify if needed
resources:
  requests:
    cpu: 50m
    memory: 64Mi
  limits:
    cpu: 100m
    memory: 128Mi

# Additional volumes on the output Deployment definition.
volumes:
  - name: redis-data
    persistentVolumeClaim:
      claimName: redis-store

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: redis-data
    mountPath: /data

nodeSelector: {}

tolerations: []

affinity: {}