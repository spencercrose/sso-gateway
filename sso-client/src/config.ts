import fs from 'fs/promises';
import path from 'path';     

/**
 * This file is part of the BC Gov SSO Client.
 * @file config.ts
 * @description Configuration file for the SSO Client, which integrates with Keycloak for authentication.
 * @license MIT Licensed 2025
 * @author Government of British Columbia
 */

export interface SSOConfig {
  HOSTNAME: string;
  NGINX_PROXY_URL: string;
  SSO_CLIENT_HOST: string;
  SSO_CLIENT_PORT: number;
  SSO_AUTH_SERVER_URL: string;
  SSO_REALM: string;
  SSO_CLIENT_ID: string;
  SSO_CLIENT_SECRET: string;
  SSO_REDIRECT_URL: string;
  SSO_REDIS_SESSION_STORE_URL: string;
  SSO_REDIS_CONNECT_PASSWORD: string;
  SSO_SESSION_SECRET: string; // Ensure this is a strong, random secret
  SSO_LOGOUT_REDIRECT_URI: string;
  SM_LOGOUT_URL: string;
}

// Resolve the configuration file path. Prioritize environment variable.
console.log("Attempting to load configuration from path:", process.env.VAULT_CONFIG_PATH);
const configFilePath = path.resolve(process.env.VAULT_CONFIG_PATH || "etc/config/config");

/**
 * Loads, extracts, and parses the Keycloak JSON configuration from the specified file.
 * The file is expected to contain a string in the format:
 * `keycloak-config="[{\"hostname\":\"...\",\"keycloak\":{...}}]"`
 *
 * This function handles file reading, string extraction, and JSON parsing.
 * If any step fails, it logs an error and exits the Node.js process,
 * as this configuration is critical for the application's startup.
 *
 * @param filePath The absolute path to the configuration file.
 * @returns A Promise that resolves with the parsed `SSOConfig` object.
 */
async function loadAndParseKeycloakConfig(filePath: string): Promise<SSOConfig> {
  try {
    await fs.access(filePath, fs.constants.R_OK);
    console.log(`[Config Loader] Configuration file found at: ${filePath}`);

    const fileContent = await fs.readFile(filePath, 'utf8');
    console.log(`[Config Loader] Successfully read file content.`);

    // --- Pre-process file content to remove potential outer quotes ---
    let processedContent = fileContent.trim(); // Remove leading/trailing whitespace

    // Check if the entire content is wrapped in an extra layer of double quotes
    if (processedContent.startsWith('"') && processedContent.endsWith('"')) {
        // If so, remove these outer quotes.
        // This is a common issue when config strings are generated by shell commands.
        processedContent = processedContent.substring(1, processedContent.length - 1);
        console.log(`[Config Loader] Removed outer quotes from file content.`);
    }

    // 3. Now, apply the original regex to the processedContent
    //    This regex expects the content to start directly with `keycloak-config="`
    const match = processedContent.match(/^config=(.+)$/);

    if (!match || match.length < 2) { // We expect 2 groups: full match + captured JSON
      console.error(`[Config Loader] Error: Invalid configuration file format for "${filePath}".`);
      console.error(`[Config Loader] Expected format: 'config=[...stringified json...]'.`);
      console.error(`[Config Loader] Actual processed content (first 100 chars): "${processedContent.substring(0, 100)}..."`);
      process.exit(1);
    }

    const jsonString = match[1]; // The captured JSON string is in the second group
    console.log(`[Config Loader] Successfully extracted JSON string. Attempting to parse...`);

    // 4. Parse the extracted JSON string
    const configData = JSON.parse(jsonString);
    console.log(`[Config Loader] JSON parsing successful.`);

    // 5. Validate the structure of the parsed data
    const config: SSOConfig = {
      HOSTNAME: configData[0]['hostname'] || 'localhost',
      NGINX_PROXY_URL: process.env.NGINX_PROXY_URL || 'http://localhost:8080',
      SSO_CLIENT_HOST: process.env.SSO_CLIENT_HOST || 'localhost',
      SSO_CLIENT_PORT: Number(process.env.SSO_CLIENT_PORT) || 3000,
      SSO_AUTH_SERVER_URL: configData[0]['keycloak']?.['auth-server-url'] || 'http://localhost:8080/auth',
      SSO_REALM: configData[0]['keycloak']?.realm || 'standard',
      SSO_CLIENT_ID: configData[0]['keycloak']?.['client-id'] || 'sso-client',
      SSO_CLIENT_SECRET: configData[0]['keycloak']?.['client-secret'] || '',
      SSO_REDIRECT_URL: `https://${configData[0]['hostname']}/sso` || 'http://localhost:8080/authn/callback',
      SSO_REDIS_SESSION_STORE_URL: process.env.REDIS_STORE_URL || 'redis://localhost:6379',
      SSO_REDIS_CONNECT_PASSWORD: process.env.REDIS_PASSWORD || '',
      SSO_SESSION_SECRET: configData[0]['keycloak']?.['session-secret'] || 'strong-default-secret-you-should-change',
      SSO_LOGOUT_REDIRECT_URI: process.env.SSO_LOGOUT_REDIRECT_URI || 'https://gov.bc.ca',
      SM_LOGOUT_URL: process.env.SM_LOGOUT_URL || 'https://logon.gov.bc.ca/clp-cgi/logoff.cgi',
    };

    console.log(`[Config Loader] SSOConfig loaded successfully.`);
    // console.log(`[Config Loader] Configuration:`, config);
    return config;

  } catch (error: any) {
    console.error(`[Config Loader] Fatal error during configuration loading: ${error.message}`);
    process.exit(1);
  }
}

const ssoConfigInstance: SSOConfig = await loadAndParseKeycloakConfig(configFilePath);
export default ssoConfigInstance;